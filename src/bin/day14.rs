use regex::Regex;

fn main() {
    let input = std::fs::read_to_string("input/day14.txt")
        .expect("Error reading file");
    
    part1(&input);
    part2(&input);
}

#[derive(Debug, Clone)]
struct Robot {
    position: (i16, i16),
    velocity: (i16, i16),
}

impl Robot {
    fn new(position: (i16, i16), velocity: (i16, i16)) -> Self {
        Robot {
            position,
            velocity,
        }
    }

    fn simulate(&mut self, rows: i16, cols: i16) {
        let (row, col) = self.position;
        let (d_row, d_col) = self.velocity;
        self.position.0 = (row + d_row + rows) % rows;
        self.position.1 = (col + d_col + cols) % cols;
    }
}

fn get_quadrant(position: (i16, i16), rows: i16, cols: i16) -> Option<i16> {
    let (row, col) = position;
    let mut quadrant = 0;
    let middle_row = rows / 2;
    let middle_col = cols / 2;
    if row == middle_row || col == middle_col {
        None
    }
    else {
        quadrant += if row > middle_row { 1 } else { 0 };
        quadrant += if col > middle_col { 2 } else { 0 };
        Some(quadrant)
    }
}

fn part1(input: &str) {
    let pattern = Regex::new(r"p=(-?\d+),(-?\d+) v=(-?\d+),(-?\d+)").unwrap();
    let mut robots: Vec<Robot> = input
        .lines()
        .filter_map(|line| {
            pattern.captures(line).map(|cap| {
                let col = cap[1].parse::<i16>().unwrap();
                let row = cap[2].parse::<i16>().unwrap();
                let d_col = cap[3].parse::<i16>().unwrap();
                let d_row = cap[4].parse::<i16>().unwrap();
                
                Robot::new((row, col), (d_row, d_col))
            })
        })
        .collect();

    const ROWS: i16 = 103;
    const COLS: i16 = 101;
    const SECONDS: u8 = 100;
    for _ in 0..SECONDS {
        for robot in robots.iter_mut() {
            robot.simulate(ROWS, COLS);
        }
    }

    let mut count_per_quadrant = vec![0; 4];
    robots.iter()
        .filter_map(|robot| {
            get_quadrant(robot.position, ROWS, COLS)
        })
        .for_each(|quadrant| {
            count_per_quadrant[quadrant as usize] += 1
        });

    let solution: u32 = count_per_quadrant
        .iter()
        .product();

    println!("The answer to part 1 is: {solution}");
}

fn part2(input: &str) {
    let pattern = Regex::new(r"p=(-?\d+),(-?\d+) v=(-?\d+),(-?\d+)").unwrap();
    let mut robots: Vec<Robot> = input
        .lines()
        .filter_map(|line| {
            pattern.captures(line).map(|cap| {
                let col = cap[1].parse::<i16>().unwrap();
                let row = cap[2].parse::<i16>().unwrap();
                let d_col = cap[3].parse::<i16>().unwrap();
                let d_row = cap[4].parse::<i16>().unwrap();
                
                Robot::new((row, col), (d_row, d_col))
            })
        })
        .collect();


    const ROWS: i16 = 103;
    const COLS: i16 = 101;
    let mut solution = 1;
    loop {
        for robot in robots.iter_mut() {
            robot.simulate(ROWS, COLS);
        }
        if contains_christmas(&robots, ROWS, COLS) {
            print_grid(&robots, ROWS, COLS);
            println!("The answer to part 2 is: {solution}");
            break;
        }
        solution += 1;
    }
}

fn print_grid(robots: &[Robot], rows: i16, cols: i16) {
    // Create a grid to count robots in each cell
    let mut grid = vec![vec![0u32; cols as usize]; rows as usize];
    
    // Count robots in each cell
    for robot in robots {
        let (row, col) = robot.position;
        grid[row as usize][col as usize] += 1;
    }
    
    // Print the grid
    for row in grid {
        for count in row {
            if count == 0 {
                print!(".");
            } else {
                print!("{}", count);
            }
        }
        println!();
    }
    println!(); 
}

fn contains_christmas(robots: &[Robot], rows: i16, cols: i16) -> bool {
    // Create a grid to count robots in each cell
    let mut grid = vec![vec![0u32; cols as usize]; rows as usize];

    // Count robots in each cell
    for robot in robots {
        let (row, col) = robot.position;
        grid[row as usize][col as usize] += 1;
    }

    // Convert to string to check for Christmas Tree
    let grid_string: String = grid.iter()
        .map(|row| {
            row.iter()
                .map(|&count| { 
                    if count == 0 { 
                        '.' 
                    } 
                    else { 
                        char::from_digit(count, 10).expect("Parse failed")
                    }
                })
                .collect::<String>()
        })
        .collect();

    grid_string.contains("1111111111111111111111111111111")
}

// .............................1.......................................................................
// ......................................................................................1..............
// ..............1...........1..........................................................................
// ..................1...............................1.....................1............................
// ...............................................................................1.....................
// ...................1.................................................................................
// 1.......1............................................................................................
// ...................................1............1........1...........1...............................
// ............................1.........1.1...................1........................................
// .....................................................................................................
// .....................................................................................................
// .........................................1..............1.............1........................1.....
// .................................................................................................1...
// ...1.................................................................................................
// ............................................................................1............1...........
// .....................................................................................................
// .....................................................................................................
// ......1..............................................................................................
// .............................1.......................................................................
// ...................1...................................1.............................................
// ....................................................................1................................
// .......................................................1..........................................1..
// ...............................................................................1.....................
// .....................................................................................................
// ......................1.1............................................................................
// ........................................11..........1............................1...................
// ...1.................................................................................1...............
// ......................................................................1................1.............
// .....................................................................................................
// ..............1..............1.......................................................................
// .....................................................................................................
// ..........1.............................................1............................................
// ........................1............................................................................
// ......................1.................1......1.....................................................
// ....................................1................................................................
// ....................1...............................................1..1.............................
// ...........1.........................................................................................
// ..1.................................................................1...1......................1.....
// .....................................................................................................
// ...................1111111111111111111111111111111..........................1.......1................
// ...................1.............................1...................................................
// ...................1.............................1...................................................
// ...................1.............................1...................................................
// ...................1.............................1....................................1..............
// ...................1..............1..............1....................1..............................
// ...................1.............111.............1...................................................
// ...................1............11111............1...................................................
// ...............1...1...........1111111...........1................1..................................
// ......1............1..........111111111..........1.1.................................................
// ...................1............11111............1.........1.........................................
// .........1.........1...........1111111...........1...................................................
// .........1.........1..........111111111..........1..1................................................
// ...................1.........11111111111.........1...................................................
// ...................1........1111111111111........1...................................................
// ........1..........1..........111111111..........1.......................1.............1.............
// .............1.....1.........11111111111.........1........................................1..........
// ...................1........1111111111111........1...................1....11.........................
// ......1............1.......111111111111111.......1........1..........................1...............
// ...................1......11111111111111111......1........1............................1.............
// ...................1........1111111111111........1.......................................1...........
// .......1...........1.......111111111111111.......1...................................................
// ...................1......11111111111111111......1........1..........................................
// 1...........1......1.....1111111111111111111.....1...................................................
// ...................1....111111111111111111111....1.....1.............................................
// ...................1.............111.............1......................1............................
// .............1.1...1.............111.............1...................................................
// ...................1.............111.............1............1......................................
// ..1................1.............................1.......................1...........................
// ...................1.............................1...........................1.......................
// ...................1.............................1.................11................................
// ...................1.............................1...................................................
// ...................1111111111111111111111111111111...................................................
// ............................................................1...1...........................1.1......
// ..........1.......................................................1..................................
// ...................................1.................................1...............................
// ..............................1......................................................................
// ...................................1............................1....................................
// .....................................................................................................
// .............1.......................................................................................
// ........1..........................................1.....................1.......................1...
// ..........................................................................1..........................
// ........................................................................1............................
// ....1................................................................................................
// ...................................................................................1.................
// ..............1..................................................................1...................
// ..............................................1......................................................
// .....................................................................................................
// ......................1..............................................................................
// ................1....................................................................................
// ...............................................1.....................................................
// .....................................................................................................
// ........................1...........................................1..............1..........1......
// ..............................................1..............1.......................................
// .....................................................................................................
// .........................................................1...............1...........................
// .....................................................................................................
// ...............................................................................1.....................
// .............................................................................1.......................
// ................................................................1..1..1.........................1..1.
// .....................................................................................................
// .....................................................................................................
// ..................................1............................1.......................1.............
// .........................................................1...........................................
